// tmpl_test
package tmpl

import (
	"testing"
)

func GenerateTest(t *testing.T) {
	temp := `　　　　　　　　　　　　　　　　　　　[報告書]
日時：{いつ}
場所：{どこ}
対象者：{だれ}
概要：
　　　{いつ}、{どこ}にて{だれ}が{どうした}という報告が寄せられた。
　　　現場を目撃した複数名も同様の証言をしており、当事者である{だれ}もこの事実を
　　　認めたことから、当日付で{だれ}を戒告処分とした。
　　　その翌日{だれ}は退職届を提出し、依願退職としてこれを受理した。
考察：
　　　{だれ}が{どうした}経緯には様々な要因が考えられる。
　　　問題が表面化するに至ったのは{いつ}だが、それ以前から問題は内在していたと
　　　考えるのが自然であり、{どこ}でなくとも普遍的に起こり得る問題である。
　　　{だれ}個人の問題として矮小化するのではなく、組織全体の問題として捉える必要がある。`
	c := `{いつ},{どこ},{だれ},{どうした}
むかしむかし,あるところ,おばあさん,桃をみつけた
ある日,森の中,くまさん,出会った`
	asserts := []string{`　　　　　　　　　　　　　　　　　　　[報告書]
日時：むかしむかし
場所：あるところ
対象者：おばあさん
概要：
　　　むかしむかし、あるところにておばあさんが桃をみつけたという報告が寄せられた。
　　　現場を目撃した複数名も同様の証言をしており、当事者であるおばあさんもこの事実を
　　　認めたことから、当日付でおばあさんを戒告処分とした。
　　　その翌日おばあさんは退職届を提出し、依願退職としてこれを受理した。
考察：
　　　おばあさんが桃をみつけた経緯には様々な要因が考えられる。
　　　問題が表面化するに至ったのはむかしむかしだが、それ以前から問題は内在していたと
　　　考えるのが自然であり、あるところでなくとも普遍的に起こり得る問題である。
　　　おばあさん個人の問題として矮小化するのではなく、組織全体の問題として捉える必要がある。]`,
		`　　　　　　　　　　　　　　　　　　　[報告書]
日時：ある日
場所：森の中
対象者：くまさん
概要：
　　　ある日、森の中にてくまさんが出会ったという報告が寄せられた。
　　　現場を目撃した複数名も同様の証言をしており、当事者であるくまさんもこの事実を
　　　認めたことから、当日付でくまさんを戒告処分とした。
　　　その翌日くまさんは退職届を提出し、依願退職としてこれを受理した。
考察：
　　　くまさんが出会った経緯には様々な要因が考えられる。
　　　問題が表面化するに至ったのはある日だが、それ以前から問題は内在していたと
　　　考えるのが自然であり、森の中でなくとも普遍的に起こり得る問題である。
　　　くまさん個人の問題として矮小化するのではなく、組織全体の問題として捉える必要がある。`}
	result, err := Generate(temp, c)
	if err != nil {
		t.Errorf(err.Error())
	}
	for i := range asserts {
		if result[i] != asserts[i] {
			t.Errorf(result[i])
		}
	}

}
